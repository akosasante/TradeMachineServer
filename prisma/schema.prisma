generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DraftPick {
  id              String          @id(map: "PK_173c858141c28aba85f3f2b66bb") @db.Uuid @default(uuid())
  dateCreated     DateTime        @default(now()) @db.Timestamp(6)
  dateModified    DateTime        @default(now()) @db.Timestamp(6)
  // The draft round for this pick (can be decimal because sometimes they have something like round 1.5 for additional picks)
  round           Decimal         @db.Decimal
  // Determines the order of the pick in its round. Not available until close to the draft when the lottery is complete.
  pickNumber      Int?
  // What draft year is this pick associated with. Each year is a new set of draft picks. major league draft is in march;
  // minor league draft is in october. during the current season, next year's major picks and this year's minor picks are available for trade
  season          Int
  // Major league, high minors (triple A and above), low minors
  type            PickLeagueLevel
  // [n-1] Maps to the FFF team that currently owns this pick (after trades). TODO: Should this field be marked as mandatory?
  currentOwnerId  String?         @db.Uuid
  currentOwner    Team?           @relation("draft_pick_currentOwnerIdToteam", fields: [currentOwnerId], references: [id], onUpdate: NoAction, map: "FK_edbfdecf43bec56ee160c9ba6bd")
  // [n-1] Maps to the FFF team that owned this pick at the start of the season. TODO: Should this field be marked as mandatory?
  originalOwnerId String?         @db.Uuid
  originalOwner   Team?           @relation("draft_pick_originalOwnerIdToteam", fields: [originalOwnerId], references: [id], onUpdate: NoAction, map: "FK_5e448065a1f32514925e8045b61")


  @@unique([type, season, round, originalOwnerId], map: "UQ_b0ee29a2eed55b5c4739873e3cd")
  @@index([currentOwnerId, originalOwnerId], map: "IDX_0de9414ff65ab246290e2793ac")
  @@index([originalOwnerId], map: "IDX_5e448065a1f32514925e8045b6")
  @@index([currentOwnerId], map: "IDX_edbfdecf43bec56ee160c9ba6b")
  @@map("draft_pick")
}

model Email {
  // This id comes from SendInBlue
  messageId    String   @id(map: "PK_b77796b667171ffa41401cfa393be9a3") @db.VarChar
  dateCreated  DateTime @default(now()) @db.Timestamp(6)
  dateModified DateTime @default(now()) @db.Timestamp(6)
  // Updated by SendInBlue webhooks. Indicates the current delivery state of the email
  status       String   @db.VarChar
  // [n-1] For emails regarding trades, indicates what trade the email was about
  tradeId      String?  @db.Uuid
  trade        Trade?   @relation(fields: [tradeId], references: [id], onUpdate: NoAction, map: "FK_9140a2b1ba9cdc4e9c273f0eb21")


  @@index([status], map: "IDX_7d64d8e03978e61c58c436ec31")
  @@map("email")
}

// Pretty sure this is from TypeORM so we may be able to drop it eventually. Wonder what Prisma uses for migrations
model migrations {
  id        Int    @id(map: "PK_6fd861cae8a5b6ceee818af8ed5") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar

  @@ignore()
}

model Player {
  id           String             @id(map: "PK_9fd0dba262c28fb584448f6ec12") @db.Uuid @default(uuid())
  dateCreated  DateTime           @default(now()) @db.Timestamp(6)
  dateModified DateTime           @default(now()) @db.Timestamp(6)
  // Name of the baseball player
  name         String             @db.VarChar
  // Are they a major league or minor league player; currently set by the Bull sync job, soon to be Oban + NocoDB
  league       PlayerLeagueLevel?
  // What MLB team do they play for; currently may be null for minor leaguers, old scripts also populated this with the minor league parent team
  mlbTeam      String?            @db.VarChar
  // Unstructured data. Currently mainly used for minor leaguers. Probably worth denormalizing some of that data or having a polymorphic table setup
  meta         Json?
  // The ESPN id of the player; currently only set for major leaguers to allow deduplication.
  playerDataId Int?
  // [n-1] The team in FFF who currently owns this player, if any.
  leagueTeamId String?            @db.Uuid
  ownerTeam    Team?              @relation(fields: [leagueTeamId], references: [id], onUpdate: NoAction, map: "FK_1aad05b09bda2079429cd8ba9d8")


  @@unique([name, playerDataId], map: "UQ_b3fd08fd2ba540e6fc2b6946e2c")
  @@index([leagueTeamId], map: "IDX_1aad05b09bda2079429cd8ba9d")
  @@index([name], map: "IDX_40e3ad1d41d05dda60e9ba76cc")
  @@index([leagueTeamId, league], map: "IDX_a49ffcdb6d07eb76e0052d5784")
  @@index([league], map: "IDX_d94a2974262e7c6129a4c5e690")
  @@map("player")
}

// probably don't need this either in the post-typeorm world; question is there a caching solution in prisma?
model query_result_cache {
  id         Int    @id(map: "PK_6a98f758d8bfd010e7e10ffd3d3") @default(autoincrement())
  identifier String @db.VarChar
  time       BigInt
  duration   Int
  query      String
  result     String

  @@map("query-result-cache")
  @@ignore()
}

// I _think_ this is for elixir?
model schema_migrations {
  version     BigInt    @id
  inserted_at DateTime? @db.Timestamp(0)

  @@ignore()
}

model Settings {
  id               String    @id(map: "PK_173c858141c28aba85f3f2b66cc") @db.Uuid @default(uuid())
  dateCreated      DateTime  @default(now()) @db.Timestamp(6)
  dateModified     DateTime  @default(now()) @db.Timestamp(6)
  // Not currently really used, but in theory would allow us to set a flag on the website for when trades can/cannot be made (time of day).
  tradeWindowStart DateTime? @db.Time(6)
  tradeWindowEnd   DateTime? @db.Time(6)
  // Not currently really used, but in theory would allow us set a flag on the website for when the trade machine is down or not to be used.
  downtime         Json?
  // Which user updated the settings. TODO: Should this field be marked as mandatory?
  modifiedById     String?   @db.Uuid
  modifiedBy       User?     @relation(fields: [modifiedById], references: [id], onUpdate: NoAction, map: "FK_cb5f64b730072c78ba13d5db952")


  @@index([downtime, modifiedById], map: "IDX_032a9a86a6ea1ccd874a452f62")
  @@index([tradeWindowStart, tradeWindowEnd, modifiedById], map: "IDX_3fa40f2df01d35d0bbed8264ca")
  @@index([modifiedById], map: "IDX_cb5f64b730072c78ba13d5db95")
  @@map("settings")
}

model Team {
  id                 String             @id(map: "PK_d4c9ceb4d198d0214d982242c10") @db.Uuid @default(uuid())
  dateCreated        DateTime           @default(now()) @db.Timestamp(6)
  dateModified       DateTime           @default(now()) @db.Timestamp(6)
  // The id of the FFF team in ESPN, used for pulling ESPN data like the team name for display or synch
  espnId             Int?               @unique(map: "UQ_4f8b73a54933f9eab5177b90362")
  // Name of the team; synched daily from ESPN
  name               String             @db.VarChar
  // Whether the team is currently active in the league or not
  status             TeamStatus         @default(DISABLED)
  // Unstructured data pulled from ESPN; mostly not currently used
  espnTeam           Json?
  // [1-n] A list of the draft picks that this team currently owns (not filtered by year or anything)
  currentDraftPicks  DraftPick[]        @relation("draft_pick_currentOwnerIdToteam")
  // [1-n] A list of the draft picks that this team owned at the beginning of a season (not filtered by year or anything)
  originalDraftPicks DraftPick[]        @relation("draft_pick_originalOwnerIdToteam")
  // [1-n] A list of players that this team currently owns
  players            Player[]
  // [1-n] A list of tradeItems received by this team (all-time)
  tradeItemsReceived TradeItem[]        @relation("teamTotrade_item_recipientId")
  // [1-n] A list of tradeItems sent by this team (all-time)
  tradeItemsSent     TradeItem[]        @relation("teamTotrade_item_senderId")
  // [1-n] A list of tradeParticipant rows (useful for indicating trades this team has been a participant in) // TODO: can prisma implicitly figure out the latter?
  tradeParticipants  TradeParticipant[]
  // [1-n] A list of users that are owners of this team.
  owners             User[]

  @@map("team")
}

model Trade {
  id                String             @id(map: "PK_8a1cea805d050478a2482f0960e") @db.Uuid @default(uuid())
  dateCreated       DateTime           @default(now()) @db.Timestamp(6)
  dateModified      DateTime           @default(now()) @db.Timestamp(6)
  // What state the trade is curerntly in (draft, submitted, etc)
  status            TradeStatus        @default(DRAFT)
  // A string describing why a trade is declined. For now just kept for record-keeping and in an email.
  declinedReason    String?            @db.VarChar
  // Which specific user declind a trade. // TODO I don't recall if there's a particular reason that this _isn't_ a relation
  declinedById      String?            @db.Uuid
  // JSON array of alal the users that have agreed to a trade (useful in case of multi-team trades); _could_ be a separate table, but I think this is fine enough for postgres
  acceptedBy        Json?
  // Timestamp for when it was accepted (idk why we don't keep a timestamp of when it was declined; but I guess the former is more important)
  acceptedOnDate    DateTime?          @db.Timestamp(6)
  // [1-n] List of emails associated with this trade
  emails            Email[]
  // [1-n] List of trade items (players/picks) that are part of this trade
  tradeItems        TradeItem[]
  // [1-n] List of trade participants that took part in this trade (always at least 2, constrained at app-level)
  tradeParticipants TradeParticipant[]


  @@index([declinedById], map: "IDX_33ece5157bae9642f83f4e69e6")
  @@map("trade")
}

model TradeItem {
  id            String        @id @db.Uuid @default(uuid())
  dateCreated   DateTime      @default(now()) @db.Timestamp(6)
  dateModified  DateTime      @default(now()) @db.Timestamp(6)
  // this is the primary key id of a draft pick or player. TODO is there a way to represent this polymorphic column in prisma?
  tradeItemId   String        @db.Uuid
  // whether this trade item is a pick or a player
  tradeItemType TradeItemType @default(PLAYER)
  // [n-1] the trade that this item is a part of. TODO: Should this be mandatory?
  tradeId       String?       @db.Uuid
  trade         Trade?        @relation(fields: [tradeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_b0526160a5fca917459d481e202")
  // [n-1] the team that is sending this pick/player. TODO: Should this be mandatory?
  senderId      String?       @db.Uuid
  sender        Team?         @relation("teamTotrade_item_senderId", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_93c36c896adc55ffa2fde088079")
  // [n-1] the team that is receiving this pick/player. TODO: Should this be mandatory?
  recipientId   String?       @db.Uuid
  recipient     Team?         @relation("teamTotrade_item_recipientId", fields: [recipientId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1abdf634a91dc15221fecbd2535")


  // TODO From typeorm, should these be in the db too?
  // @Index("player_trade_item_index", { synchronize: false })
  //@Index("pick_trade_item_index", { synchronize: false })

  @@unique([tradeId, tradeItemId, tradeItemType, senderId, recipientId], map: "IDX_e052cf9b5b061404e7d9757a5f")
  @@index([recipientId], map: "IDX_1abdf634a91dc15221fecbd253")
  @@index([senderId, recipientId], map: "IDX_5183edace8d48f41e21706f3de")
  @@index([tradeItemType], map: "IDX_7410fa0ef846786168a48f8309")
  @@index([senderId], map: "IDX_93c36c896adc55ffa2fde08807")
  @@map("trade_item")
}

model TradeParticipant {
  id              String               @id(map: "PK_60f29eec159bc8b923a8ebda680") @db.Uuid @default(uuid())
  dateCreated     DateTime             @default(now()) @db.Timestamp(6)
  dateModified    DateTime             @default(now()) @db.Timestamp(6)
  // Indicates whether this participant created/initiated/requested the trade or if they're a 'receiver'
  participantType TradeParticipantType @default(RECIPIENT)
  // [n-1] The trade that this participant is associated with. TODO: Should this be mandatory?
  tradeId         String?              @db.Uuid
  trade           Trade?               @relation(fields: [tradeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_55814676906f1f2c458fa255042")
  // [n-1] The team that this participant is associated with. TODO: Should this be mandatory?
  teamId          String?              @db.Uuid
  team            Team?                @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6f42978de8c286663f97f12c9dc")


  // From typeorm should these be in the db too?
  // @Index("trade_creator_index", { synchronize: false })
  //@Index("trade_recipient_index", { synchronize: false })

  @@unique([tradeId, teamId], map: "IDX_6cefad40c0c9cbb34500c9f2b5")
  @@index([participantType], map: "IDX_4790898869f46e4f7714c23f4e")
  @@index([teamId], map: "IDX_6f42978de8c286663f97f12c9d")
  @@map("trade_participant")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model typeorm_metadata {
  type     String  @db.VarChar
  database String? @db.VarChar
  schema   String? @db.VarChar
  name     String? @db.VarChar
  value    String?

  @@ignore()
}

model User {
  id                     String     @id(map: "PK_46a8d3f2767f238737f7bbde32a") @db.Uuid @default(uuid())
  dateCreated            DateTime   @default(now()) @db.Timestamp(6)
  dateModified           DateTime   @default(now()) @db.Timestamp(6)
  // email address used for login and for trademachine to send emails to
  email                  String     @unique(map: "UQ_37a55ad1dbb070054bece40642f") @db.VarChar
  // hashed + salted password
  password               String?    @db.VarChar
  // display name; used is a couple places in the UI and maybe in emails
  displayName            String?    @db.VarChar
  // used to `@` mention the correct person in slack when posting the trade submitted message
  slackUsername          String?    @db.VarChar
  // Used for access control; whether they're a regular-degular owner, a privelged commissioner, or all-powerful admin
  role                   UserRole   @default(OWNER)
  // used for cookies
  lastLoggedIn           DateTime?  @db.Timestamp(6)
  // used during password reset flow
  passwordResetExpiresOn DateTime?  @db.Timestamp(6)
  // used during password reset flow
  passwordResetToken     String?    @db.VarChar
  // is this user currently active or not.
  status                 UserStatus @default(ACTIVE)
  // the name used in the minorleague sheet; used for mapping when running synchs from that sheet
  csvName                String?    @db.VarChar
  // unstructured data from ESPN mapping to this user; not sure if this currently used at all
  espnMember             Json?
  // [n-1] each user can only be a member of 0-1 teams but teams can have multiple users
  team                   Team?      @relation(fields: [teamId], references: [id], onUpdate: NoAction, map: "FK_77f62757967de516e50ff134e35") // TODO: does this cover ondelete: set null?
  teamId                 String?    @db.Uuid
  // [1-n] settings modified by this user
  modifiedSettings       Settings[]

  @@map("user")
}

model xc_knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)

  @@ignore()
}

model xc_knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?

  @@ignore()
}

model xc_knex_migrationsv2 {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)

  @@ignore()
}

model xc_knex_migrationsv2_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?

  @@ignore()
}

enum PickLeagueLevel {
  MAJORS      @map("1")
  HIGHMINORS  @map("2")
  LOWMINORS   @map("3")

  @@map("draft_pick_type_enum")
}

enum oban_job_state {
  available
  scheduled
  executing
  retryable
  completed
  discarded
  cancelled
}

enum PlayerLeagueLevel {
  MAJORS  @map("1")
  MINORS  @map("2")

  @@map("player_league_enum")
}

enum TeamStatus {
  ACTIVE    @map("1")
  DISABLED  @map("2")

  @@map("team_status_enum")
}

enum TradeItemType {
  PLAYER  @map("1")
  PICK    @map("2")

  @@map("trade_item_tradeitemtype_enum")
}

enum TradeParticipantType {
  CREATOR    @map("1")
  RECIPIENT  @map("2")

  @@map("trade_participant_participanttype_enum")
}

enum TradeStatus {
  DRAFT      @map("1")
  REQUESTED  @map("2")
  PENDING    @map("3")
  ACCEPTED   @map("4")
  REJECTED   @map("5")
  SUBMITTED  @map("6")

  @@map("trade_status_enum")
}

enum UserRole {
  ADMIN         @map("1")
  OWNER         @map("2")
  COMMISSIONER  @map("3")

  @@map("user_role_enum")
}

enum UserStatus {
  ACTIVE    @map("1")
  INACTIVE  @map("2")

  @@map("user_status_enum")
}
