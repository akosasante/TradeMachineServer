# TradeMachine Server - Modern Development Environment
#
# Prerequisites:
#   1. Start shared infrastructure first: cd ../; docker-compose -f docker-compose.shared.yml up -d
#   2. Ensure .env file exists in parent directory with database credentials
#   3. Install dependencies locally first: npm ci (for better IDE support)
#
# Usage:
#   Development: docker-compose up -d
#   Production build test: docker-compose --profile production up

services:
  # Modern development server with tsx hot reloading
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - IP=0.0.0.0
      # Connect to shared PostgreSQL (external port 5438, internal 5432)
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=${DATABASE_USER:-trader_user}
      - PG_PASSWORD=${DATABASE_PASSWORD:-dev_password_change_me}
      - PG_DB=${DATABASE_NAME:-trade_dn}
      - ORM_CONFIG=development
      - BASE_DIR=/app
      # Connect to shared Redis
      - REDIS_IP=redis
      - REDIS_PORT=6379
      - SESSION_SECRET=local_dev_secret
      - DATABASE_URL=postgresql://${DATABASE_USER:-trader_user}:${DATABASE_PASSWORD:-dev_password_change_me}@postgres:5432/${DATABASE_NAME:-trade_dn}?schema=dev
      # BASE_URL points to frontend for email templates
      - BASE_URL=http://localhost:3030
      - COOKIE_SECURE=false
      # Disable Rollbar in development to prevent errors
      - ROLLBAR_TOKEN=
      - ENABLE_LOGS=true
      # Enable tsx watch mode optimizations
      - TSX_TSCONFIG_PATH=/app/tsconfig.json
    volumes:
      # Bind mount source code for hot reloading (excludes node_modules for performance)
      - ./src:/app/src:cached
      - ./prisma:/app/prisma:cached
      - ./tests:/app/tests:cached
      - ./.env:/app/.env:cached
      - ./tsconfig.json:/app/tsconfig.json:cached
      - ./ormconfig.js:/app/ormconfig.js:cached
      # Named volume for node_modules to avoid cross-platform issues
      - node_modules_volume:/app/node_modules
      # Performance: exclude common directories that cause churn
      - /app/dist
      - /app/.git
    init: true  # Proper signal handling for clean shutdowns
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - trade_machine_shared
    depends_on:
      - db-migrate

  # Production-like build test (optional, use --profile production)
  app-prod-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3002:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=${DATABASE_USER:-trader_user}
      - PG_PASSWORD=${DATABASE_PASSWORD:-dev_password_change_me}
      - PG_DB=${DATABASE_NAME:-trade_dn}
      - ORM_CONFIG=development
      - REDIS_IP=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://${DATABASE_USER:-trader_user}:${DATABASE_PASSWORD:-dev_password_change_me}@postgres:5432/${DATABASE_NAME:-trade_dn}?schema=dev
    networks:
      - trade_machine_shared
    profiles:
      - production

  # Database migration runner (runs once on startup)
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=${DATABASE_USER:-trader_user}
      - PG_PASSWORD=${DATABASE_PASSWORD:-dev_password_change_me}
      - PG_DB=${DATABASE_NAME:-trade_dn}
      - DATABASE_URL=postgresql://${DATABASE_USER:-trader_user}:${DATABASE_PASSWORD:-dev_password_change_me}@postgres:5432/${DATABASE_NAME:-trade_dn}?schema=dev
    command: ["sh", "-c", "npx prisma migrate dev --skip-generate && npx prisma db seed"]
    networks:
      - trade_machine_shared
    volumes:
      - ./prisma:/app/prisma:cached

# Connect to shared infrastructure network
networks:
  trade_machine_shared:
    external: true
    name: trade_machine_shared

# Volumes for better development performance
volumes:
  node_modules_volume:
    driver: local