name: CD Workflow

on:
    push:
        branches:
            - main

jobs:
    build:
        name: Transpile typescript code and upload artifacts
        runs-on: ubuntu-22.04

        steps:
            - name: Notify Rollbar of deploy start
              uses: rollbar/github-deploy-action@2.1.1
              id: rollbar_pre_deploy
              with:
                  environment: "production"
                  version: ${{ github.sha }}
                  status: "started"
                  local_username: ${{ github.actor }}
              env:
                  ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
                  ROLLBAR_USERNAME: "aaasante"

            - name: Check out repository code
              uses: actions/checkout@v3.1.0

            - uses: actions/setup-node@v3.5.1
              with:
                  node-version: "16.x"
                  cache: "npm"

            - name: Install all packages
              run: npm install

            - name: Transpile typescript code
              run: make build

            - name: Compress built folders
              uses: master-atul/tar-action@v1.1.2
              id: compress
              with:
                  command: c
                  files: |
                      ./.tool-versions
                      ./declarations
                      ./dist
                      ./ormconfig.js
                      ./tsconfig.json
                      ./package.json
                      ./package-lock.json
                      ./check_migrations.sh
                      ./replace-migration-schema.sh
                      ./Makefile
                  outPath: out.tar.gz

            - name: Upload built folders to artifacts
              uses: actions/upload-artifact@v3.1.1
              with:
                  name: transpiled_app_folder
                  path: ./out.tar.gz

            - name: Compress migration folder
              uses: master-atul/tar-action@v1.1.2
              id: compress_migration
              with:
                  command: c
                  files: ./prisma
                  outPath: out-prisma.tar.gz

            - name: Upload migration folder to artifacts
              uses: actions/upload-artifact@v3.1.1
              with:
                  name: prisma_folder
                  path: ./out-prisma.tar.gz

    migrate:
        name: Backup db (if needed) and migarte to latest schema (if available)
        needs: build
        runs-on: ubuntu-22.04

        steps:
            - name: Download prisma folder
              uses: actions/download-artifact@v3.0.1
              with:
                  name: prisma_folder

            - name: Upload to server
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  password: ${{ secrets.PASSWORD }}
                  port: ${{ secrets.SSH_PORT }}
                  source: "out-prisma.tar.gz"
                  target: "/opt/Apps/TradeMachine"

            - name: Unzip prisma folder and overwrite existing one (shouldn't effect running app)
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  password: ${{ secrets.PASSWORD }}
                  port: ${{ secrets.SSH_PORT }}
                  # the 'link' stuff basically lets us overwrite the migrations' sub-folder every time: https://stackoverflow.com/questions/7933680/remove-directory-structure-when-extracting-tar-archive
                  script: |
                      cd /opt/Apps/TradeMachine
                      tar -xzf out-prisma.tar.gz --unlink-first --recursive-unlink
                      rm out-prisma.tar.gz

            - name: Check if we need to do migrations
              id: check_migrations
              continue-on-error: true # makes the "conclusion" of this step always TRUE. But the "outcome" depends on the exit value of the last command in `script`
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  password: ${{ secrets.PASSWORD }}
                  port: ${{ secrets.SSH_PORT }}
                  script: |
                      cd /opt/Apps/TradeMachine
                      export DATABASE_URL='${{ secrets.PROD_DATABASE_URL }}'
                      ls -la prisma/migrations
                      /home/dev_deployer/.asdf/shims/npx -y prisma migrate status | grep -e 'Database schema is up to date!' -e 'No migration found in prisma/migrations'

            - name: Make a logical backup of the production db and upload to Google Drive (ONLY IF we're about to run a migration)
              if: steps.check_migrations.outcome == 'failure' # if the check_migrations step exited with a non-successful (non-zero) code. That means grep found that there are prisma migrations to be run. In which case, we want to back up our data just in case before proceeding.
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.BACKUP_USERNAME }}
                  password: ${{ secrets.BACKUP_PASSWORD }}
                  port: ${{ secrets.SSH_PORT }}
                  script: |
                      echo "last command returned: ${{ steps.check_migrations.outcome }}"
                      bash tm_backup.sh trade_machine public tm_backup ${{ secrets.BACKUP_PASSWORD }}

    deploy:
        name: Deploy to digital ocean server
        needs: [build, migrate]
        runs-on: ubuntu-22.04

        steps:
            - name: Download dist folder
              uses: actions/download-artifact@v3.0.1
              with:
                  name: transpiled_app_folder

            - name: Upload to server
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  password: ${{ secrets.PASSWORD }}
                  port: ${{ secrets.SSH_PORT }}
                  source: "out.tar.gz"
                  target: "/opt/Apps/TradeMachine"

            - name: Unzip and restart the server
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  password: ${{ secrets.PASSWORD }}
                  port: ${{ secrets.SSH_PORT }}
                  script: |
                      cd /opt/Apps/TradeMachine
                      tar -xzf out.tar.gz --overwrite
                      /home/dev_deployer/.asdf/shims/npm install --production
                      sh replace-migration-schema.sh dev public
                      /home/dev_deployer/.asdf/shims/npx pm2 restart trademachine
                      rm out.tar.gz

            - name: Notify Rollbar of deploy finish
              uses: rollbar/github-deploy-action@2.1.1
              id: rollbar_post_deploy
              with:
                  environment: "production"
                  version: ${{ github.sha }}
                  status: "succeeded"
                  local_username: ${{ github.actor }}
              env:
                  ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
                  ROLLBAR_USERNAME: "aaasante"
                  DEPLOY_ID: ${{ steps.rollbar_pre_deploy.outputs.deploy_id }}
