name: Build and Deploy Docker Image

on:
  push:
    branches: [ staging, main ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:
    inputs:
      trigger_deploy:
        description: 'Deploy after building'
        required: true
        default: true
        type: boolean
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      message:
        description: 'Description for this build/deployment'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/trade-machine-server

jobs:
  # Security scanning and linting
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    # Skip security on push if this commit was already scanned in a PR merge
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # Build depends on security when security runs, otherwise run independently
    needs: security
    if: always() && (needs.security.result == 'success' || needs.security.result == 'skipped')
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Set build info
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "### Building commit: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
          elif [ -n "${{ github.event.inputs.message }}" ]; then
            echo "### Manual build: ${{ github.event.inputs.message }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Manual build" >> $GITHUB_STEP_SUMMARY
          fi

          # Add security scan status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Build Information" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security.result }}" = "skipped" ]; then
            echo "- **Security scan:** Skipped (already scanned in PR)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Security scan:** ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          # Add workflow inputs to summary if manually triggered
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "- **Deploy after building:** ${{ github.event.inputs.trigger_deploy }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Target environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ github.event.inputs.message }}" ]; then
              echo "- **Message:** ${{ github.event.inputs.message }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ github.ref_name }}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/akosasante/trade-machine-server:cache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=ghcr.io/akosasante/trade-machine-server:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT


  deploy:
    needs: build
    if: |
      success() && (
        (github.event_name == 'push' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')) ||
        (github.event_name == 'workflow_dispatch' && inputs.trigger_deploy == true)
      )
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Staging deployment conditions
          - environment: staging
            condition: ${{ github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging' }}
            app_dir: /opt/Apps/StagingTradeMachine
            image_tag: ${{ github.ref_name || 'staging' }}
            port: 3015
            compose_file: docker-compose.staging.yml

          # Production deployment conditions
          - environment: production
            condition: ${{ github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production' }}
            app_dir: /opt/Apps/TradeMachine
            image_tag: main
            port: 3005
            compose_file: docker-compose.prod.yml

    steps:
      - name: Notify Rollbar of deploy start
        if: ${{ matrix.condition }}
        uses: rollbar/github-deploy-action@2.1.2
        id: rollbar_pre_deploy
        with:
          environment: ${{ matrix.environment }}
          version: ${{ github.sha }}
          status: "started"
          local_username: ${{ github.actor }}
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
          ROLLBAR_USERNAME: "aaasante"
          DEPLOY_ID: ${{ steps.rollbar_pre_deploy.outputs.deploy_id }}

      - name: Notify Rollbar of deployment failure
        if: ${{ matrix.condition && failure() }}
        uses: rollbar/github-deploy-action@2.1.2
        with:
          environment: ${{ matrix.environment }}
          version: ${{ github.sha }}
          status: "failed"
          local_username: ${{ github.actor }}
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
          ROLLBAR_USERNAME: "aaasante"
          DEPLOY_ID: ${{ steps.rollbar_pre_deploy.outputs.deploy_id }}

      - name: Set deployment info
        if: ${{ matrix.condition }}
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "### Deploying commit: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
          elif [ -n "${{ github.event.inputs.message }}" ]; then
            echo "### Manual deployment: ${{ github.event.inputs.message }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Manual deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image tag:** ${{ matrix.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment path:** ${{ matrix.app_dir }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Skip if condition not met
        if: ${{ !matrix.condition }}
        run: echo "Skipping ${{ matrix.environment }} deployment" && exit 0

      - name: Run database migrations for ${{ matrix.environment }}
        if: ${{ matrix.condition }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ matrix.app_dir }}

            # Login to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest image
            docker pull ${{ needs.build.outputs.image }}

            # Run database migrations
            echo "Running database migrations..."
            docker run --rm --env-file .env --network host ${{ needs.build.outputs.image }} npx prisma migrate deploy

      - name: Deploy ${{ matrix.environment }}
        if: ${{ matrix.condition }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ matrix.app_dir }}

            # Set IMAGE_TAG environment variable
            export IMAGE_TAG="${{ matrix.image_tag }}"

            # Update compose file if it doesn't exist
            if [ ! -f "${{ matrix.compose_file }}" ]; then
              echo "Downloading ${{ matrix.compose_file }} from repository..."
              curl -o "${{ matrix.compose_file }}" "https://raw.githubusercontent.com/${{ github.repository }}/main/${{ matrix.compose_file }}"
            fi

            # Deploy with zero-downtime strategy
            echo "Starting ${{ matrix.environment }} deployment..."
            docker compose -f ${{ matrix.compose_file }} pull app
            docker compose -f ${{ matrix.compose_file }} up -d app

            # Health check with proper timeout
            echo "Performing health check..."
            timeout=90
            health_check_passed=false

            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:${{ matrix.port }}/health; then
                echo "${{ matrix.environment }} deployment successful - health check passed"
                health_check_passed=true
                break
              fi
              echo "Health check failed, retrying in 5 seconds... ($timeout seconds remaining)"
              sleep 5
              timeout=$((timeout-5))
            done

            if [ "$health_check_passed" = "false" ]; then
              echo "${{ matrix.environment }} health check failed after 90 seconds"
              echo "Container logs:"
              docker compose -f ${{ matrix.compose_file }} logs app

              echo "Rolling back deployment..."
              docker compose -f ${{ matrix.compose_file }} down
              exit 1
            fi

            # Clean up old images (keep last 3)
            echo "Cleaning up old images..."
            docker image prune -f
            docker images ghcr.io/akosasante/trade-machine-server --format "{{.Repository}}:{{.Tag}}" | tail -n +4 | xargs -r docker rmi || echo "No old images to remove"

      - name: Notify Rollbar of deployment completion
        if: ${{ matrix.condition && success() }}
        uses: rollbar/github-deploy-action@2.1.2
        with:
          environment: ${{ matrix.environment }}
          version: ${{ github.sha }}
          status: "succeeded"
          local_username: ${{ github.actor }}
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
          ROLLBAR_USERNAME: "aaasante"