name: Deploy Docker Image

on:
  workflow_run:
    workflows: [ "Build and Publish Docker Image" ]
    branches: [ main, staging ]
    types: [ completed ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        include:
          # Staging deployment conditions
          - environment: staging
            condition: ${{ (github.event.workflow_run.head_branch == 'staging') || (github.event.workflow_run.head_branch == 'main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging') }}
            app_dir: /opt/Apps/StagingTradeMachine
            image_tag: ${{ github.event.workflow_run.head_branch || github.ref_name }}
            port: 3015
          
          # Production deployment conditions  
          - environment: production
            condition: ${{ (github.event.workflow_run.head_branch == 'main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
            app_dir: /opt/Apps/TradeMachine
            image_tag: main
            port: 3005

    steps:
      - name: Skip if condition not met
        if: ${{ !matrix.condition }}
        run: echo "Skipping ${{ matrix.environment }} deployment" && exit 0

      - name: Run database migrations for ${{ matrix.environment }}
        if: ${{ matrix.condition }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ matrix.app_dir }}
            source .env
            # Convert repository name to lowercase for Docker compatibility
            REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            docker pull ghcr.io/${REPO_LOWERCASE}:${{ matrix.image_tag }}
            # Extract DATABASE_URL first
            DB_URL=$(grep DATABASE_URL .env | cut -d '=' -f2-)
            echo "Using database URL (censored): ${DB_URL//:/***:}"
            
            # Verify PostgreSQL can be accessed before attempting migrations
            echo "Verifying PostgreSQL connectivity..."
            if ! PGPASSWORD=$(grep -oP '(?<=password=)[^@]+' <<< "$DB_URL") psql -U $(grep -oP '(?<=postgresql://)[^:]+' <<< "$DB_URL") -h $(grep -oP '(?<=@)[^:]+' <<< "$DB_URL") -p $(grep -oP '(?<=@[^:]+:)[^/]+' <<< "$DB_URL") -d $(grep -oP '(?<=/)[^?]+' <<< "$DB_URL") -c '\q'; then
              echo "ERROR: Cannot connect to PostgreSQL directly from server"
              echo "Please check your database connection settings"
              exit 1
            else
              echo "PostgreSQL connection successful from host"
            fi
            
            # Run with host network and as root user to access PostgreSQL on the host
            echo "Running database migrations..."
            
            # Run migration with verbose output
            docker run --rm --network=host --user root -e DATABASE_URL="${DB_URL}" ghcr.io/${REPO_LOWERCASE}:${{ matrix.image_tag }} bash -c "echo 'Current directory:' && pwd && ls -la && echo 'Prisma directory:' && ls -la prisma && npx prisma migrate deploy --verbose"

      - name: Deploy ${{ matrix.environment }}
        if: ${{ matrix.condition }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ matrix.app_dir }}
            
            # Convert repository name to lowercase for Docker compatibility
            REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            
            # Update IMAGE_TAG and GITHUB_REPOSITORY in .env
            sed -i 's/^IMAGE_TAG=.*/IMAGE_TAG=${{ matrix.image_tag }}/' .env
            sed -i 's/^GITHUB_REPOSITORY=.*/GITHUB_REPOSITORY='${REPO_LOWERCASE}'/' .env
            
            # Verify the DATABASE_URL is properly formatted
            DB_URL=$(grep DATABASE_URL .env | cut -d '=' -f2-)
            if [[ ! "$DB_URL" =~ ^(postgresql|postgres):// ]]; then
              echo "Warning: DATABASE_URL in .env file doesn't start with postgresql:// or postgres://"
              echo "Current value (censored): ${DB_URL//:/***:}"
            fi
            
            # Login to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Copy our updated docker-compose file to the server
            cat > docker-compose.yml << EOF
version: '3.8'

services:
  app:
    image: ghcr.io/\${GITHUB_REPOSITORY}:\${IMAGE_TAG}
    container_name: ${{ matrix.environment }}_trademachine
    restart: always
    env_file: .env
    environment:
      - NODE_ENV=production
      - PORT=${{ matrix.port }}
      - IP=0.0.0.0
      - ORM_CONFIG=${{ matrix.environment }}
      - APP_ENV=${{ matrix.environment }}
    network_mode: host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${{ matrix.port }}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
EOF
            
            # Deploy
            docker-compose pull app
            docker-compose up -d app
            
            # Health check
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -sf http://localhost:${{ matrix.port }}/health; then
                echo "${{ matrix.environment }} deployment successful"
                exit 0
              fi
              sleep 5
              timeout=$((timeout-5))
            done
            
            echo "${{ matrix.environment }} health check failed"
            docker-compose logs app
            exit 1

      - name: Notify Rollbar of deployment
        if: ${{ matrix.condition }}
        uses: rollbar/github-deploy-action@2.1.2
        with:
          environment: ${{ matrix.environment }}
          version: ${{ github.sha }}
          status: "succeeded"
          local_username: ${{ github.actor }}
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
          ROLLBAR_USERNAME: "aaasante"